$Test = {
    Class = RealTimeApplication
    +Functions = {
        Class = ReferenceContainer
        +SyncGAM = {
        	Class = IOGAM
        	InputSignals = {
                Time = {
                	Type = uint32
                	DataSource = Timer
                	Frequency = 1
                }
        	}
            OutputSignals = {
                DDBTime = {
                	Type = uint32
                	DataSource = DDB1
                }
			}
        }
        +PrioGAM = {
            Class = IOGAM
 
InputSignals = {
MARTe2::EPICSCAInput::Test::UInt16_Http = {
Type = float64
DataSource = DiodeRec
}

MARTe2::EPICSCAInput::Test::Int32_Http = {
Type = float64
DataSource = DiodeRec
}

MARTe2::EPICSCAInput::Test::UInt32_Http = {
Type = float64
DataSource = DiodeRec
}

MARTe2::EPICSCAInput::Test::Record1_Http = {
Type = float64
DataSource = DiodeRec
}

MARTe2::EPICSCAInput::Test::Record2_Http = {
Type = float64
DataSource = DiodeRec
}

MARTe2::EPICSCAInput::Test::Record3_Http = {
Type = float64
DataSource = DiodeRec
}

MARTe2::EPICSCAInput::Test::Record4_Http = {
Type = float64
DataSource = DiodeRec
}

MARTe2::EPICSCAInput::Test::Float32_Http = {
Type = float64
DataSource = DiodeRec
}

MARTe2::EPICSCAInput::Test::Float64_Http = {
Type = float64
DataSource = DiodeRec
}

MARTe2::EPICSCAInput::Test::Int16Arr_Http = {
Type = int16
DataSource = DiodeRec
NumberOfDimensions = 1
NumberOfElements = 10
}

MARTe2::EPICSCAInput::Test::UInt16Arr_Http = {
Type = int16
DataSource = DiodeRec
NumberOfDimensions = 1
NumberOfElements = 10
}

MARTe2::EPICSCAInput::Test::Int32Arr_Http = {
Type = int32
DataSource = DiodeRec
NumberOfDimensions = 1
NumberOfElements = 10
}

MARTe2::EPICSCAInput::Test::UInt32Arr_Http = {
Type = int32
DataSource = DiodeRec
NumberOfDimensions = 1
NumberOfElements = 10
}

MARTe2::EPICSCAInput::Test::Float32Arr_Http = {
Type = float32
DataSource = DiodeRec
NumberOfDimensions = 1
NumberOfElements = 10
}

MARTe2::EPICSCAInput::Test::Float64Arr_Http = {
Type = float64
DataSource = DiodeRec
NumberOfDimensions = 1
NumberOfElements = 10
}

ToBeRec0 = {
NumberOfDimensions = 1
NumberOfElements = 4
Type = uint32
DataSource = DiodeRec
}

}
            OutputSignals = {
MARTe2::EPICSCAInput::Test::UInt16_DDB = {
Type = float64
DataSource = Logger
}

MARTe2::EPICSCAInput::Test::Int32_DDB = {
Type = float64
DataSource = Logger
}

MARTe2::EPICSCAInput::Test::UInt32_DDB = {
Type = float64
DataSource = Logger
}

MARTe2::EPICSCAInput::Test::Record1_DDB = {
Type = float64
DataSource = Logger
}

MARTe2::EPICSCAInput::Test::Record2_DDB = {
Type = float64
DataSource = Logger
}

MARTe2::EPICSCAInput::Test::Record3_DDB = {
Type = float64
DataSource = Logger
}

MARTe2::EPICSCAInput::Test::Record4_DDB = {
Type = float64
DataSource = Logger
}

MARTe2::EPICSCAInput::Test::Float32_DDB = {
Type = float64
DataSource = Logger
}

MARTe2::EPICSCAInput::Test::Float64_DDB = {
Type = float64
DataSource = Logger
}

MARTe2::EPICSCAInput::Test::Int16Arr_DDB = {
Type = int16
DataSource = Logger
NumberOfDimensions = 1
NumberOfElements = 10
}

MARTe2::EPICSCAInput::Test::UInt16Arr_DDB = {
Type = int16
DataSource = Logger
NumberOfDimensions = 1
NumberOfElements = 10
}

MARTe2::EPICSCAInput::Test::Int32Arr_DDB = {
Type = int32
DataSource = Logger
NumberOfDimensions = 1
NumberOfElements = 10
}

MARTe2::EPICSCAInput::Test::UInt32Arr_DDB = {
Type = int32
DataSource = Logger
NumberOfDimensions = 1
NumberOfElements = 10
}

MARTe2::EPICSCAInput::Test::Float32Arr_DDB = {
Type = float32
DataSource = Logger
NumberOfDimensions = 1
NumberOfElements = 10
}

MARTe2::EPICSCAInput::Test::Float64Arr_DDB = {
Type = float64
DataSource = Logger
NumberOfDimensions = 1
NumberOfElements = 10
}


ToBeRecDDB = {
NumberOfDimensions = 1
NumberOfElements = 4
Type = uint32
DataSource = DDB1
}
            }
        }
    }
    +Data = {
        Class = ReferenceContainer
        DefaultDataSource = DDB1
        +DDB1 = {
            Class = GAMDataSource
        }
        +Timings = {
            Class = TimingDataSource
        }
        +Timer = {
        	Class = LinuxTimer
        	SleepNature = Default
        	Signals = {
        		Counter = {
					Type = uint32
          		}
          		Time = {
            		Type = uint32              
				}
			}
        }
        +Logger = {
            Class = LoggerDataSource
        }
        +DiodeRec = {
        	Class = HttpDiodeReceiver
        	ServerPort = "4444"
Signals = {
MARTe2::EPICSCAInput::Test::UInt16_Http = {
PVName = MARTe2::EPICSCAInput::Test::UInt16
}

MARTe2::EPICSCAInput::Test::Int32_Http = {
PVName = MARTe2::EPICSCAInput::Test::Int32
}

MARTe2::EPICSCAInput::Test::UInt32_Http = {
PVName = MARTe2::EPICSCAInput::Test::UInt32
}

MARTe2::EPICSCAInput::Test::Record1_Http = {
PVName = MARTe2::EPICSCAInput::Test::Record1
}

MARTe2::EPICSCAInput::Test::Record2_Http = {
PVName = MARTe2::EPICSCAInput::Test::Record2
}

MARTe2::EPICSCAInput::Test::Record3_Http = {
PVName = MARTe2::EPICSCAInput::Test::Record3
}

MARTe2::EPICSCAInput::Test::Record4_Http = {
PVName = MARTe2::EPICSCAInput::Test::Record4
}

MARTe2::EPICSCAInput::Test::Float32_Http = {
PVName = MARTe2::EPICSCAInput::Test::Float32
}

MARTe2::EPICSCAInput::Test::Float64_Http = {
PVName = MARTe2::EPICSCAInput::Test::Float64
}

MARTe2::EPICSCAInput::Test::Int16Arr_Http = {
PVName = MARTe2::EPICSCAInput::Test::Int16Arr
}

MARTe2::EPICSCAInput::Test::UInt16Arr_Http = {
PVName = MARTe2::EPICSCAInput::Test::UInt16Arr
}

MARTe2::EPICSCAInput::Test::Int32Arr_Http = {
PVName = MARTe2::EPICSCAInput::Test::Int32Arr
}

MARTe2::EPICSCAInput::Test::UInt32Arr_Http = {
PVName = MARTe2::EPICSCAInput::Test::UInt32Arr
}

MARTe2::EPICSCAInput::Test::Float32Arr_Http = {
PVName = MARTe2::EPICSCAInput::Test::Float32Arr
}

MARTe2::EPICSCAInput::Test::Float64Arr_Http = {
PVName = MARTe2::EPICSCAInput::Test::Float64Arr
}

ToBeRec0 = {
NumberOfDimensions = 1
NumberOfElements = 4
Type = uint32
}

}
        }
    }
    +States = {
        Class = ReferenceContainer
        +State1 = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    Functions = {SyncGAM, PrioGAM}
                }
            }
        }
    }
    +Scheduler = {
        Class = GAMScheduler
        TimingDataSource = Timings
    }
}
